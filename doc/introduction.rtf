{\rtf1\ansi\deff1\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\froman\fprq2\fcharset0 Times New Roman;}{\f3\fswiss\fprq2\fcharset0 Arial;}{\f4\fmodern\fprq1\fcharset0 DejaVu Sans Mono;}{\f5\fmodern\fprq1\fcharset128 Courier New;}{\f6\fswiss\fprq2\fcharset0 DejaVu Sans;}}
{\colortbl;\red0\green0\blue0;\red128\green128\blue128;}
{\stylesheet{\s1\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057\snext1 Normal;}
{\s2\sb240\sa120\keepn\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af3\afs28\lang255\ltrch\dbch\af1\langfe255\hich\f3\fs28\lang2057\loch\f3\fs28\lang2057\sbasedon1\snext3 Heading;}
{\s3\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057\sbasedon1\snext3 Body Text;}
{\s4\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057\sbasedon3\snext4 List;}
{\s5\sb120\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af1\afs24\lang255\ai\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\i\loch\f1\fs24\lang2057\i\sbasedon1\snext5 caption;}
{\s6\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057\sbasedon1\snext6 Index;}
{\s7\sb120\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af1\afs24\lang255\ai\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\i\loch\f1\fs24\lang2057\i\sbasedon1\snext7 caption;}
{\s8\sb120\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af1\afs24\lang255\ai\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\i\loch\f1\fs24\lang2057\i\sbasedon1\snext8 WW-caption;}
{\s9\sb240\sa120\keepn\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af3\afs32\lang255\ab\ltrch\dbch\langfe255\hich\f3\fs32\lang2057\b\loch\f3\fs32\lang2057\b\sbasedon2\snext3{\*\soutlvl0} heading 1;}
{\s10\sb240\sa120\keepn\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af3\afs28\lang255\ai\ab\ltrch\dbch\langfe255\hich\f3\fs28\lang2057\i\b\loch\f3\fs28\lang2057\i\b\sbasedon2\snext3{\*\soutlvl1} heading 2;}
{\s11\sb240\sa120\keepn\cf0\qc{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af3\afs36\lang255\ab\ltrch\dbch\langfe255\hich\f3\fs36\lang2057\b\loch\f3\fs36\lang2057\b\sbasedon2\snext12 Title;}
{\s12\sb240\sa120\keepn\cf0\qc{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af3\afs28\lang255\ai\ltrch\dbch\langfe255\hich\f3\fs28\lang2057\i\loch\f3\fs28\lang2057\i\sbasedon2\snext3 Subtitle;}
{\s13\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057\sbasedon3\snext13 Code;}
{\s14\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057\sbasedon1\snext14 Salutation;}
{\*\cs16\cf0\rtlch\af4\afs24\lang255\ltrch\dbch\af4\langfe255\hich\f4\fs24\lang2057\loch\f4\fs24\lang2057 Example;}
{\*\cs17\cf0\rtlch\af5\afs20\lang255\ltrch\dbch\af6\langfe255\hich\f5\fs20\lang2057\loch\f5\fs20\lang2057 Code;}
}
{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment StarWriter}{\vern6800}}\deftab709
{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn11905\pghsxn16837\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Standard;}}
{\*\pgdscno0}\paperh16837\paperw11905\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\pgwsxn11905\pghsxn16837\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pard\plain \ltrpar\s11\cf0\qc{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sb240\sa120\keepn\rtlch\af3\afs36\lang255\ab\ltrch\dbch\langfe255\hich\f3\fs36\lang2057\b\loch\f3\fs36\lang2057\b {\rtlch \ltrch\loch\f3\fs36\lang2057\i0\b Using the Lookup codes Plugin}
\par \pard\plain \ltrpar\s9\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sb240\sa120\keepn\ql\rtlch\af3\afs32\lang255\ab\ltrch\dbch\af3\langfe255\hich\f3\fs32\lang2057\b\loch\f3\fs32\lang2057\b {\rtlch \ltrch\loch\f3\fs32\lang2057\i0\b What is it for?}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 Rather than storing a list of things in the database as strings, e.g. Mr, Mrs and so on, instead we store an integer value that we can look up to get the true value. This is done for a number of reasons, e.g. it is easy to change the meaning of a code with
out having to update large tables, storing an integer is a lot less space than a string and so on. It is also easy to translate a site if needed, but this plugin isn't sophisticated enough to do that.}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 It does have some disadvantages in that you need to know what the magic number means and it can make writing queries a pain. The plugin has methods that will help with this.}
\par \pard\plain \ltrpar\s9\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sb240\sa120\keepn\ql\rtlch\af3\afs32\lang255\ab\ltrch\dbch\af3\langfe255\hich\f3\fs32\lang2057\b\loch\f3\fs32\lang2057\b {\rtlch \ltrch\loch\f3\fs32\lang2057\i0\b Installation}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af3\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 script/plugin install git://github.com/fjfish/has_lookup_extension.git}
\par \pard\plain \ltrpar\s9\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sb240\sa120\keepn\ql\rtlch\af3\afs32\lang255\ab\ltrch\dbch\af3\langfe255\hich\f3\fs32\lang2057\b\loch\f3\fs32\lang2057\b {\rtlch \ltrch\loch\f3\fs32\lang2057\i0\b How is it implemented}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 \line You have a lookup codes table with a domain column that defines what the lookup is for. The plugin lets you do this:\line \line {\rtlch\ltrch\hich\f5\fs20\loch\f5\fs20 class Applicant < ActiveRecord::Base\line # ...\line \~ has_lookup_code( \{\line \~\~\~ :title\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~ => 'Person Title',\line \~\~\~ :occupation\~\~\~\~\~\~\~\~\~\~ =>
 'Occupation',\line \~\~\~ :employment_type\~\~\~\~\~ => 'Employment Status',\line \~\~\~ :credit_rating\~\~\~\~\~\~\~ => 'Credit Status',\line \~\~\~ :residential_status\~\~ => 'Residential Status',\line \~\~\~ :marital_status\~\~\~\~\~\~ => 'Marital Status',\line \~\~\~ :property_style\~\~\~\~\~\~ => 'Property Style',\line 
\~\~\~ :phone_one_type\~\~\~\~\~\~ => 'Phone Type',\line \~\~\~ :phone_two_type\~\~\~\~\~\~ => 'Phone Type',\line \~ \} )\line # ...\line end}\line \line The symbol is the column name, the string is the arbitrary domain name (can be anything).\line \line This adds some class-level methods, for example there will be 
Applicant.title_list, Applicant.sorted_title_list and Applicant.title_lookup.\line \line The first two let you do this in your views:\line \line  {\rtlch\ltrch\hich\f5\fs20\loch\f5\fs20 <label for="applicant_title">Title <span class="required">*</span></label>\line  <%= f.select :title, Applicant.sorted_title_list, \{\}, 
:class => 'select' %>}\line \line The last one lets you turn the integer into the string by using a hash. The plugin adds a convenience method, e.g. title_str, that gives you the string value for an instance.}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057{\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0{\rtlch\ltrch\hich\f5\fs20\loch\f5\fs20 app = Applicant.find :first\line app.title_str\line "mr" }}{\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0  \line \line By convention id 0 is 'Please select' and this is always first in the sorted list. The other list method gives the codes in whatever the order come out of the hash. If you are creating human-readable export
s of you data and don't want \'93please select\'94 then use formatted_title_str.\line \line At the class level I also now have\line \line {\rtlch\ltrch\hich\f5\fs20\loch\f5\fs20 Applicant.title_dr\~\~\~\~\~\~\~\~\~\~\~\~ Applicant.title_mrs\line Applicant.title_list\~\~\~\~\~\~\~\~\~\~ Applicant.title_ms\line Applicant.title_lookup\~\~\~\~\~\~\~\~ Applicant.ti
tle_other\line Applicant.title_miss\~\~\~\~\~\~\~\~\~\~ Applicant.title_please_select\line Applicant.title_mr\~\~\~\~\~\~\~\~\~\~\~\~ Applicant.title_rev}\line \line Ignoring the xxx_lookup and xxx_list methods, this lets you refer to the codes by name without having to do any magic number hacking.
 }
\par \pard\plain \ltrpar\s9\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sb240\sa120\keepn\ql\rtlch\af3\afs32\lang255\ab\ltrch\dbch\af3\langfe255\hich\f3\fs32\lang2057\b\loch\f3\fs32\lang2057\b {\rtlch \ltrch\loch\f3\fs32\lang2057\i0\b Set up}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 The initialisation code will create a migration for you and copy in the model files. It also creates app/helpers/admin/lookupcodes_helper.rb.}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 Review the codes defined in this file and add any as appropriate.}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 Run the migration}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 run rake codes:load}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 This last can be put into your capistrano file to reload any codes that you may have changed.}
\par \pard\plain \ltrpar\s9\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sb240\sa120\keepn\ql\rtlch\af3\afs32\lang255\ab\ltrch\dbch\af3\langfe255\hich\f3\fs32\lang2057\b\loch\f3\fs32\lang2057\b {\rtlch \ltrch\loch\f3\fs32\lang2057\i0\b Warnings and caveats}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 Be very careful to add new codes at the end of lists or you will mess up the encoding.}
\par \pard\plain \ltrpar\s9\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sb240\sa120\keepn\ql\rtlch\af3\afs32\lang255\ab\ltrch\dbch\af3\langfe255\hich\f3\fs32\lang2057\b\loch\f3\fs32\lang2057\b {\rtlch \ltrch\loch\f3\fs32\lang2057\i0\b Dependencies}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 If you have a type and subtype it can be accommodated, but you will need to do do some extra coding yourself. For example if you have employment type and subtype you can do this:}
\par \pard\plain \ltrpar\s13\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs20\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs20\lang2057\loch\f1\fs20\lang2057 {\rtlch \ltrch\loch   }{\rtlch \ltrch\loch\f1\fs20\lang2057\i0\b0 class << self}
\par \pard\plain \ltrpar\s13\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch     }{\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0\rtlch\ltrch\hich\fs20\loch\fs20 def get_subtype_list_for_id(type_id)\line       type_str = LookupCode.get_domain_lookup('Employment Type')[type_id.to_i]\line       LookupCode.get_sorted_domain_list("Employment Type: #\{type_str\} subtype")\line     end}
\par \pard\plain \ltrpar\s13\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch     }{\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0\rtlch\ltrch\hich\fs20\loch\fs20 def get_subtype_strings_for_id(type_id)\line       type_str = LookupCode.get_domain_lookup('Employment Type')[type_id.to_i]\line       LookupCode.get_domain_lookup("Employment Type: #\{type_str\} subtype")\line     end}
\par \pard\plain \ltrpar\s13\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch   }{\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0\rtlch\ltrch\hich\fs20\loch\fs20 end}
\par \pard\plain \ltrpar\s3\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\sa120\ql\rtlch\af1\afs24\lang255\ltrch\dbch\af6\langfe255\hich\f1\fs24\lang2057\loch\f1\fs24\lang2057 {\rtlch \ltrch\loch\f1\fs24\lang2057\i0\b0 This means you have to pass in the parent id to get the list, and is a hack, but it does work.}
\par }